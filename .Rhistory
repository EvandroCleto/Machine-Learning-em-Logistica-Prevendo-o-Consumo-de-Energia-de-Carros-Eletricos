# Cria um vetor sequencial de 1 a 55
seq_num <- seq(from = 1, to = 55)
# Cria um dataframe com uma coluna chamada "numero" com os valores sequenciais
df <- data.frame(numero = seq_num)
# Exibe o dataframe resultante
print(df)
install.packages("rmarkdown")
library(rmarkdown)
search()
?outliers
??outliers
setwd("D:/Cursos/Curso_FCD/1-BigDataRAzure/Arquivos/Cap22/Projeto01_V_3")
getwd()
library(psych)
library(readxl)
library('dplyr')
require(randomForest)
require(lattice)
library(ggplot2)
library(writexl)
library(stats)
library(tidyverse)
library(car)
library(caTools)
library(bruceR)
library(caret)
dados_treino <- read_excel('dados_treino.xlsx', sheet = 'Sheet1')
dados_teste <- read_excel('dados_teste.xlsx', sheet = 'Sheet1')
View(dados_treino)
View(dados_teste)
modelo_Regessao <- lm(Energy_consumption ~ ., data = dados_treino)
modelo_Regessao
pred_Regressao <- predict(modelo_Regessao,dados_teste)
View(pred_Regressao)
summary(modelo_Regessao)
modelo_RF <- train(Energy_consumption ~ .,data = dados_treino, method ='rf')
pred_RF <- predict(modelo_RF,dados_teste)
View(modelo_RF)
summary(modelo_RF)
plot(dados_teste$Energy_consumption, pred_RF)
postResample(pred = pred_RF, obs = dados_teste$Energy_consumption)
modelo_SVM <- train(Energy_consumption ~ .,data = dados_treino, method ='svmLinear3',
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(cost = c(0.1, 1, 10),
Loss = c("epsilonInsensitive", "epsilonSensitive")))
pred_SVM <- predict(modelo_SVM,dados_teste)
View(modelo_SVM)
plot(dados_teste$Energy_consumption, pred_SVM)
postResample(pred = pred_SVM, obs = dados_teste$Energy_consumption)
modelo_SVM <- train(Energy_consumption ~ .,data = dados_treino, method ='svmLinear3')
pred_SVM <- predict(modelo_SVM,dados_teste)
postResample(pred = pred_SVM, obs = dados_teste$Energy_consumption)
modelo_SVM_V1 <- train(Energy_consumption ~ .,data = dados_treino, method ='svmLinear3',
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(cost = c(0.1, 1, 10),
Loss = c("epsilonInsensitive", "epsilonSensitive")))
pred_SVM_1 <- predict(modelo_SVM_V1,dados_teste)
postResample(pred = pred_SVM_1, obs = dados_teste$Energy_consumption)
modelo_SVM_V1 <- train(Energy_consumption ~ .,data = dados_treino, method ='svmLinear3',
trControl = trainControl(method = "cv", number = 10),
tuneGrid = expand.grid(cost = c(0.1, 1, 10),
Loss = c("epsilonInsensitive", "epsilonSensitive")))
pred_SVM_1 <- predict(modelo_SVM_V1,dados_teste)
postResample(pred = pred_SVM_1, obs = dados_teste$Energy_consumption)
